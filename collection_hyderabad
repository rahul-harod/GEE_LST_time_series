/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var india_adm2 = ee.FeatureCollection("users/rharod4/IND_adm2"),
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Point([78.48494862007962, 17.400425569844845]),
    aoi = ee.FeatureCollection("users/rharod4/Hyderabad_boundary");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
var geometry=ee.Geometry.Point([78.48494862007962,17.400425569844845]);
// var aoi=ee.Geometry.Polygon([
//                 [78.21812324300267,17.21178307185213],
//                 [78.70701484456517,17.21178307185213],
//                 [78.70701484456517,17.586572563377725],
//                 [78.21812324300267,17.586572563377725],
//                 [78.21812324300267,17.21178307185213]
//   ]);

// var aoi=india_adm2.filterMetadata("NAME_2",'equals','Hyderabad')
Map.addLayer(aoi,{'color':'black'},'aoi')
Map.addLayer(geometry,{'color':'red'},'geometry')
// var ROI=india_adm2.filterMetadata("NAME_2",'equals','Chennai')
// var ROI=india_adm2.filterMetadata("NAME_2",'equals','Hyderabad')
// provide geometry in geometry name variable
var LandsatLST = require('users/rharod4/Time_series:Landsat_LST.js');
var Year_start=1982,
    Year_end=2021,
    Month_start=4,
    Month_end=5 ;
    
Map.centerObject(geometry,6);

var LandsatColl = LandsatLST.collection( Month_start, Month_end ,geometry);
// print(LandsatColl)
var cmap1 = ['blue', 'cyan', 'green', 'yellow', 'red'];
var cmap2 = ['pink','blue', 'cyan', 'green','gray', 'yellow','orange', 'red','purple']
// var cmap2=['black','white']
var LST_collection=LandsatColl.select(['LST'])

var months = ee.List.sequence(4, 5);
var years = ee.List.sequence(1984, 2020);
years=years.remove(2001) // for hyderabad
// years=years.removeAll(ee.List([1990,1993,2002,2010,2017,2018]));// for chennai

// Map filtering and reducing across year-month combinations and convert to ImageCollection
var Coll1 = ee.ImageCollection.fromImages(
  years.map(function (y) {
        return months.map(function (m) {
            return LST_collection
              .filter(ee.Filter.calendarRange(y, y, 'year'))
              .filter(ee.Filter.calendarRange(m, m, 'month'))
              .sort('CLOUD_COVER').first()
        });
    }).flatten());
var Coll2 = ee.ImageCollection.fromImages(
  years.map(function (y) {
            return Coll1
              .filter(ee.Filter.calendarRange(y, y, 'year'))
              .sort('CLOUD_COVER').first()
    }).flatten());
Coll2=Coll2.map(function(a){
                  return a.set('year',ee.Image(a).date().get('year'))
                          .set('month',ee.Image(a).date().get('month'))
                })
// print('final_collection: ',Coll2)
print('year:',Coll2.aggregate_array('year'))
// print('month:',Coll2.aggregate_array('month'))
var Final_collection=ee.ImageCollection(Coll2.map(fill_gap))

function fill_gap(image){
        var filled1a = image.focal_mean(2, 'square', 'pixels', 1)
        return filled1a.blend(image);
}

//Mean LST
var lst_mean=Final_collection.mean().clip(aoi).rename('LST_mean');
//Standard deviation
var lst_std=Final_collection.reduce(ee.Reducer.stdDev()).rename('LST_std');

//Deviation Collection (LST-Mean)
var deviation=Final_collection.map(function(img){
  return img.subtract(lst_mean).rename('deviation')
})

// Normalized deviation
var Normalized_deviation=deviation.map(function(img){
  return img.divide(lst_std).rename('Normalized_deviation')
})

var n = Final_collection.size().getInfo();
var colList = Final_collection.toList(n);
var before5=ee.List([])
var after5=ee.List([])
for(var i=0;i<5;i++){
    before5=before5.add(ee.Image(colList.get(i)))
    after5=after5.add(ee.Image(colList.get(n-i-1)))
}
print('before5',before5)
print('after5',after5)

var visArgs_LST = {
  min:290,
  max:330,
  palette:cmap2
};
before5=ee.ImageCollection(before5).mean().clip(aoi).rename('before_LST');
after5=ee.ImageCollection(after5).mean().clip(aoi).rename('after_LST');
Map.addLayer(before5,visArgs_LST,'before5');
Map.addLayer(lst_mean.clip(aoi),visArgs_LST, 'mean');
Map.addLayer(after5,visArgs_LST,'after5');


//Normalized deviation
var n = Normalized_deviation.size().getInfo();
var colList = Normalized_deviation.toList(n);
var Nstd_before=ee.List([])
var Nstd_after=ee.List([])
for(var i=0;i<5;i++){
    Nstd_before=Nstd_before.add(ee.Image(colList.get(i)))
    Nstd_after=Nstd_after.add(ee.Image(colList.get(n-i-1)))
}

var visArgs_Nstd = {
  min:-5,
  max:5,
  palette:cmap2
};

Nstd_before=ee.ImageCollection(Nstd_before).mean().clip(aoi).rename('before_Nstd');
Nstd_after=ee.ImageCollection(Nstd_after).mean().clip(aoi).rename('after_Nstd');
Map.addLayer(Nstd_before,visArgs_Nstd,'Nstd_before');
Map.addLayer(Nstd_after,visArgs_Nstd,'Nstd_after');



var stats_coll=before5.addBands(lst_mean).addBands(after5).addBands(Nstd_before).addBands(Nstd_after);
print(stats_coll);

var mean = stats_coll.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: aoi,
  scale: 30,
  maxPixels: 1e13
});
var minimum= stats_coll.reduceRegion({
  reducer: ee.Reducer.min(),
  geometry: aoi,
  scale: 30,
  maxPixels: 1e13
});
var maximum= stats_coll.reduceRegion({
  reducer: ee.Reducer.max(),
  geometry: aoi,
  scale: 30,
  maxPixels: 1e13
});
print('min: ',minimum);
print('mean: ',mean);
print('max: ',maximum);

var normalized_std_hist=stats_coll.select(['before_Nstd','after_Nstd']);
var chart1 =
    ui.Chart.image.histogram({image: normalized_std_hist, region: aoi, scale: 30})
        .setSeriesNames(['Before','After'])
        .setOptions({
          title: 'Normalized deviation',
          hAxis: {
            title: 'Normalized deviation',
            titleTextStyle: {italic: false, bold: true},
          },
          vAxis:
              {title: 'Count', titleTextStyle: {italic: false, bold: true}},
          colors: ['cf513e', '1d6b99']
        });
print(chart1);

var LST_hist=stats_coll.select(['LST_mean','before_LST','after_LST']);
var chart2 =
    ui.Chart.image.histogram({image: LST_hist, region: aoi, scale: 30})
        .setSeriesNames(['Mean','Before','After'])
        .setOptions({
          title: 'LST',
          hAxis: {
            title: 'LST',
            titleTextStyle: {italic: false, bold: true},
          },
          vAxis:
              {title: 'Count', titleTextStyle: {italic: false, bold: true}},
          colors: ['cf513e', '1d6b99','f0af07']
        });
print(chart2);

/*

var visArgs = {
  min:0,
  max:10,
  palette:cmap2
};

// Convert each image to an RGB visualization image by mapping the visualize
// function over the image collection using the arguments defined previously.


var tempColVis = (ee.ImageCollection(lst_std)).map(function(img) {
// var tempColVis = Normalized_deviation.map(function(img) {
  return img.visualize(visArgs);
});
// Define an empty image to paint features to.
var empty = ee.Image().byte();

// Paint country feature edges to the empty image.
var ROIOutline = empty
  .paint({featureCollection: ROI, color: 1, width: 1})
  // Convert to an RGB visualization image; set line color to black.
  .visualize({palette: '000000'});

// Map a blend operation over the temperature collection to overlay the country
// border outline image on all collection images.
var tempColOutline = tempColVis.map(function(img) {
  return img.blend(ROIOutline);
});

// Define animation arguments.
var videoArgs = {
  dimensions: 768,
  region:Final_collection.geometry(),
  framesPerSecond: 3,
  crs: 'EPSG:3857'
};


// Print a URL that will produce the filmstrip when accessed.
print("lst_std",tempColOutline.getFilmstripThumbURL(videoArgs));



// Map.addLayer(deviation.min(),visArgs,'Normalized_deviation_min');
// Map.addLayer(deviation.max(),visArgs,'Normalized_deviation_max');
// Map.addLayer(lst_mean,{min:290, max:330, palette:cmap2}, 'mean');
// Map.addLayer(lst_std,{min:0, max:10, palette:cmap2}, 'st_dev');

// Map.addLayer(deviation.min(),visArgs,'deviation_min');
// Map.addLayer(deviation.max(),visArgs,'deviation+max');
Map.addLayer(ROI,{'color':'red'},'chennai')




var n = Final_collection.size().getInfo();
    
var colList = Final_collection.toList(n);
    
var colID =Final_collection.getInfo()['id']
for (var i = 0; i < n; i++) {
  var img = ee.Image(colList.get(i));
  var id = img.id().getInfo() || colID+'_image_'+i.toString();
  var region = aoi

      
  Export.image.toDrive({
        image: img,
        description: id,
        folder: "HYDERABAD/LST",
        fileNamePrefix: id,
        region: region,
        fileFormat: 'GeoTIFF',
        scale: 30,
        maxPixels: 1e13})
    }
    
    
      
Export.image.toDrive({
        image: lst_mean,
        description:'mean_LST',
        folder: "HYDERABAD",
        region: region,
        fileFormat: 'GeoTIFF',
        scale: 30,
        maxPixels: 1e13})
        
Export.image.toDrive({
        image: lst_std,
        description:'lst_std',
        folder: "HYDERABAD",
        region: region,
        fileFormat: 'GeoTIFF',
        scale: 30,
        maxPixels: 1e13})
        
        
*/